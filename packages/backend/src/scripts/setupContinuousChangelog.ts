import { AutoChangelogService } from '../services/autoChangelogService';
import { jobScheduler } from '../services/scheduledJobs';

async function setupContinuousChangelog() {
  console.log('🚀 Setting up Continuous Git Changelog System\n');

  try {
    // 1. Initialize the auto-changelog service
    console.log('1️⃣ Initializing Auto-Changelog Service...');
    const autoService = new AutoChangelogService();

    // 2. Test Git access
    console.log('\n2️⃣ Testing Git Repository Access...');
    try {
      const result = await autoService.processNewCommits();
      console.log(`   ✅ Git access working - processed ${result.commitsProcessed} commits`);
      console.log(`   📝 Created ${result.entriesCreated} changelog entries`);
      if (result.changelogVersion) {
        console.log(`   📋 Using changelog: ${result.changelogVersion}`);
      }
    } catch (error) {
      console.error('   ❌ Git access failed:', error);
      throw error;
    }

    // 3. Check processing statistics
    console.log('\n3️⃣ Checking Processing Statistics...');
    const stats = await autoService.getProcessingStats();
    console.log(`   📊 Total commits tracked: ${stats.totalCommitsTracked}`);
    console.log(`   🌍 Public commits tracked: ${stats.publicCommitsTracked}`);
    console.log(`   🤖 Auto-generated entries: ${stats.autoGeneratedEntries}`);
    console.log(`   📝 Unreleased entries: ${stats.unreleasedEntries}`);
    if (stats.lastProcessedCommit) {
      console.log(`   ⏰ Last processed: ${stats.lastProcessedCommit.shortHash} - ${stats.lastProcessedCommit.subject}`);
    }

    // 4. Test scheduled job trigger
    console.log('\n4️⃣ Testing Scheduled Job Integration...');
    try {
      const jobResult = await jobScheduler.triggerAutoChangelogProcessing();
      console.log(`   ✅ Scheduled job working - processed ${jobResult.commitsProcessed} commits`);
    } catch (error) {
      console.error('   ❌ Scheduled job failed:', error);
    }

    // 5. Display webhook configuration
    console.log('\n5️⃣ Webhook Configuration...');
    console.log('   🔗 Available webhook endpoints:');
    console.log('     • GitHub: POST /api/git-webhooks/github');
    console.log('     • GitLab: POST /api/git-webhooks/gitlab');
    console.log('     • Generic: POST /api/git-webhooks/generic');
    console.log('     • Test: POST /api/git-webhooks/test');
    console.log('     • Health: GET /api/git-webhooks/health');
    console.log('     • Config: GET /api/git-webhooks/config');

    // 6. Environment variables check
    console.log('\n6️⃣ Environment Variables...');
    console.log(`   🔐 GitHub webhook secret: ${process.env.GITHUB_WEBHOOK_SECRET ? '✅ Set' : '❌ Not set'}`);
    console.log(`   🔐 GitLab webhook token: ${process.env.GITLAB_WEBHOOK_TOKEN ? '✅ Set' : '❌ Not set'}`);
    console.log(`   🔐 Generic webhook secret: ${process.env.GENERIC_WEBHOOK_SECRET ? '✅ Set' : '❌ Not set'}`);

    // 7. API endpoints summary
    console.log('\n7️⃣ Available API Endpoints...');
    console.log('   🔧 Auto-processing endpoints:');
    console.log('     • POST /api/git-changelogs/admin/auto-process - Trigger manual processing');
    console.log('     • GET /api/git-changelogs/admin/auto-stats - Get processing statistics');
    console.log('     • POST /api/git-changelogs/admin/create-version - Create versioned changelog');
    console.log('   🌍 Public endpoints:');
    console.log('     • GET /api/git-changelogs/markdown - Get changelog as markdown');
    console.log('     • GET /api/git-changelogs/export/json - Get changelog as JSON');

    console.log('\n✅ Continuous Git Changelog System Setup Complete!');
    console.log('\n📋 System Overview:');
    console.log('   • ⏰ Scheduled Processing: Every 5 minutes');
    console.log('   • 🔔 Webhook Support: GitHub, GitLab, Generic');
    console.log('   • 📝 Auto-Generated Entries: Appear in "Unreleased" changelog');
    console.log('   • 🚀 Version Creation: Manual or automated release creation');
    console.log('   • 🔄 Real-time Updates: Commits become changelog entries automatically');

    console.log('\n🎯 Next Steps:');
    console.log('   1. Set up webhook in your Git repository (optional)');
    console.log('   2. Configure environment variables for webhook security');
    console.log('   3. Monitor the "Unreleased" changelog for new entries');
    console.log('   4. Create versioned releases when ready');
    console.log('   5. Enjoy automated changelog generation! 🎉');

  } catch (error) {
    console.error('❌ Setup failed:', error);
    throw error;
  }
}

// Test continuous processing workflow
async function testContinuousWorkflow() {
  console.log('\n🧪 Testing Continuous Workflow...\n');

  try {
    const autoService = new AutoChangelogService();

    // 1. Process new commits
    console.log('1️⃣ Processing new commits...');
    const result1 = await autoService.processNewCommits();
    console.log(`   📝 Processed ${result1.commitsProcessed} commits, created ${result1.entriesCreated} entries`);

    // 2. Get current stats
    console.log('\n2️⃣ Getting current statistics...');
    const stats = await autoService.getProcessingStats();
    console.log(`   📊 Unreleased entries: ${stats.unreleasedEntries}`);

    // 3. Test version creation (if there are unreleased entries)
    if (stats.unreleasedEntries > 0) {
      console.log('\n3️⃣ Testing version creation...');
      const testVersion = `v1.0.${Date.now()}`;
      try {
        const changelogId = await autoService.createVersionedChangelog(
          testVersion,
          `Test Release ${testVersion}`
        );
        console.log(`   ✅ Created test version ${testVersion} (changelog ID: ${changelogId})`);
        
        // Check stats after version creation
        const newStats = await autoService.getProcessingStats();
        console.log(`   📊 Unreleased entries after version creation: ${newStats.unreleasedEntries}`);
      } catch (error) {
        console.error('   ❌ Version creation failed:', error);
      }
    } else {
      console.log('\n3️⃣ No unreleased entries to create version from');
    }

    console.log('\n✅ Continuous workflow test completed!');

  } catch (error) {
    console.error('❌ Workflow test failed:', error);
    throw error;
  }
}

// Demonstrate webhook testing
async function testWebhookIntegration() {
  console.log('\n🔗 Testing Webhook Integration...\n');

  try {
    // Test the webhook endpoints
    console.log('1️⃣ Webhook endpoints available:');
    console.log('   • Test webhook: curl -X POST "http://localhost:3000/api/git-webhooks/test"');
    console.log('   • Health check: curl -X GET "http://localhost:3000/api/git-webhooks/health"');
    console.log('   • Configuration: curl -X GET "http://localhost:3000/api/git-webhooks/config"');

    console.log('\n2️⃣ GitHub webhook setup:');
    console.log('   • URL: http://your-domain.com/api/git-webhooks/github');
    console.log('   • Content type: application/json');
    console.log('   • Secret: Set GITHUB_WEBHOOK_SECRET environment variable');
    console.log('   • Events: Just the push event');

    console.log('\n3️⃣ GitLab webhook setup:');
    console.log('   • URL: http://your-domain.com/api/git-webhooks/gitlab');
    console.log('   • Secret token: Set GITLAB_WEBHOOK_TOKEN environment variable');
    console.log('   • Trigger: Push events');

    console.log('\n✅ Webhook integration ready!');

  } catch (error) {
    console.error('❌ Webhook test failed:', error);
    throw error;
  }
}

// Run setup if this file is executed directly
if (require.main === module) {
  const command = process.argv[2];

  switch (command) {
    case 'test-workflow':
      testContinuousWorkflow()
        .then(() => {
          console.log('\n🎉 Workflow test completed successfully!');
          process.exit(0);
        })
        .catch((error) => {
          console.error('\n💥 Workflow test failed:', error);
          process.exit(1);
        });
      break;

    case 'test-webhooks':
      testWebhookIntegration()
        .then(() => {
          console.log('\n🎉 Webhook test completed successfully!');
          process.exit(0);
        })
        .catch((error) => {
          console.error('\n💥 Webhook test failed:', error);
          process.exit(1);
        });
      break;

    default:
      setupContinuousChangelog()
        .then(() => {
          console.log('\n🎉 Setup completed successfully!');
          process.exit(0);
        })
        .catch((error) => {
          console.error('\n💥 Setup failed:', error);
          process.exit(1);
        });
  }
}

export { setupContinuousChangelog, testContinuousWorkflow, testWebhookIntegration };
